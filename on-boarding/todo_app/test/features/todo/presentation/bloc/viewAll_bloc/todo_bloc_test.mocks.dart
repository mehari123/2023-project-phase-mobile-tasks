// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/features/todo/presentation/bloc/viewAll_bloc/todo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/core/error/failure.dart' as _i9;
import 'package:todo_app/core/platform/network_info.dart' as _i6;
import 'package:todo_app/core/usecases/usecase.dart' as _i11;
import 'package:todo_app/features/todo/data/local/todolocal_data_source.dart'
    as _i5;
import 'package:todo_app/features/todo/data/remote/todo_remot_data_source.dart'
    as _i4;
import 'package:todo_app/features/todo/data/repositeries/todo_repository_impl.dart'
    as _i12;
import 'package:todo_app/features/todo/domain/entities/task.dart' as _i10;
import 'package:todo_app/features/todo/domain/repositories/repository.dart'
    as _i2;
import 'package:todo_app/features/todo/domain/usecases/view_all_tasks.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoRemoteDataSource_2 extends _i1.SmartFake
    implements _i4.TodoRemoteDataSource {
  _FakeTodoRemoteDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoLocalDataSource_3 extends _i1.SmartFake
    implements _i5.TodoLocalDataSource {
  _FakeTodoLocalDataSource_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_4 extends _i1.SmartFake implements _i6.NetworkInfo {
  _FakeNetworkInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ViewAllTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAllTasks extends _i1.Mock implements _i7.ViewAllTasks {
  MockViewAllTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoRepository);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>> call(
          _i11.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.Tasks>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>>);
}

/// A class which mocks [Tasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasks extends _i1.Mock implements _i10.Tasks {
  MockTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: '',
      ) as String);
  @override
  set title(String? _title) => super.noSuchMethod(
        Invocation.setter(
          #title,
          _title,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);
  @override
  set description(String? _description) => super.noSuchMethod(
        Invocation.setter(
          #description,
          _description,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set dueDate(DateTime? _dueDate) => super.noSuchMethod(
        Invocation.setter(
          #dueDate,
          _dueDate,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set isDone(bool? _isDone) => super.noSuchMethod(
        Invocation.setter(
          #isDone,
          _isDone,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [TodoRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepositoryImpl extends _i1.Mock
    implements _i12.TodoRepositoryImpl {
  MockTodoRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeTodoRemoteDataSource_2(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i4.TodoRemoteDataSource);
  @override
  _i5.TodoLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeTodoLocalDataSource_3(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i5.TodoLocalDataSource);
  @override
  _i6.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_4(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i6.NetworkInfo);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>> addTask(
          _i10.Tasks? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.Tasks>>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.Tasks>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i10.Tasks>> viewTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewTask,
          [id],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, _i10.Tasks>>.value(
            _FakeEither_1<_i9.Failure, _i10.Tasks>(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, _i10.Tasks>>);
}
