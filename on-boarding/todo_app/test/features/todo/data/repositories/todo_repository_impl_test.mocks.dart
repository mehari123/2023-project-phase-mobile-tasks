// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/features/todo/data/repositories/todo_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/core/error/exception.dart' as _i11;
import 'package:todo_app/core/error/failure.dart' as _i9;
import 'package:todo_app/core/platform/network_info.dart' as _i5;
import 'package:todo_app/features/todo/data/resources/local/todolocal_data_source.dart'
    as _i4;
import 'package:todo_app/features/todo/data/models/todo_model.dart' as _i2;
import 'package:todo_app/features/todo/data/resources/remote/todo_data_source.dart'
    as _i3;
import 'package:todo_app/features/todo/data/repositeries/todo_repository_impl.dart'
    as _i8;
import 'package:todo_app/features/todo/domain/entities/task.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FaketodoModel_0 extends _i1.SmartFake implements _i2.todoModel {
  _FaketodoModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoRemoteDataSource_1 extends _i1.SmartFake
    implements _i3.TodoRemoteDataSource {
  _FakeTodoRemoteDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoLocalDataSource_2 extends _i1.SmartFake
    implements _i4.TodoLocalDataSource {
  _FakeTodoLocalDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_3 extends _i1.SmartFake implements _i5.NetworkInfo {
  _FakeNetworkInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i3.TodoRemoteDataSource {
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);
  @override
  _i7.Future<_i2.todoModel> viewTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #viewTask,
          [id],
        ),
        returnValue: _i7.Future<_i2.todoModel>.value(_FaketodoModel_0(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.todoModel>.value(_FaketodoModel_0(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.todoModel>);
  @override
  _i7.Future<List<_i2.todoModel>> viewAllTask() => (super.noSuchMethod(
        Invocation.method(
          #viewAllTask,
          [],
        ),
        returnValue: _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
      ) as _i7.Future<List<_i2.todoModel>>);
  @override
  _i7.Future<List<_i2.todoModel>> addTask(_i2.todoModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
      ) as _i7.Future<List<_i2.todoModel>>);
}

/// A class which mocks [TodoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalDataSource extends _i1.Mock
    implements _i4.TodoLocalDataSource {
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);
  @override
  _i7.Future<_i2.todoModel> viewTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #viewTask,
          [id],
        ),
        returnValue: _i7.Future<_i2.todoModel>.value(_FaketodoModel_0(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.todoModel>.value(_FaketodoModel_0(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.todoModel>);
  @override
  _i7.Future<List<_i2.todoModel>> viewAllTask() => (super.noSuchMethod(
        Invocation.method(
          #viewAllTask,
          [],
        ),
        returnValue: _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
      ) as _i7.Future<List<_i2.todoModel>>);
  @override
  _i7.Future<List<_i2.todoModel>> addTask(_i2.todoModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.todoModel>>.value(<_i2.todoModel>[]),
      ) as _i7.Future<List<_i2.todoModel>>);
  @override
  _i7.Future<void> cachTasks(List<_i2.todoModel>? task) => (super.noSuchMethod(
        Invocation.method(
          #cachTasks,
          [task],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [TodoRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepositoryImpl extends _i1.Mock
    implements _i8.TodoRepositoryImpl {
  @override
  _i3.TodoRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeTodoRemoteDataSource_1(
          this,
          Invocation.getter(#remoteDataSource),
        ),
        returnValueForMissingStub: _FakeTodoRemoteDataSource_1(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i3.TodoRemoteDataSource);
  @override
  _i4.TodoLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeTodoLocalDataSource_2(
          this,
          Invocation.getter(#localDataSource),
        ),
        returnValueForMissingStub: _FakeTodoLocalDataSource_2(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i4.TodoLocalDataSource);
  @override
  _i5.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
        returnValueForMissingStub: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i5.NetworkInfo);
  @override
  _i7.Future<_i6.Either<_i9.Failure, List<_i10.Tasks>>> addTask(
          _i10.Tasks? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue:
            _i7.Future<_i6.Either<_i9.Failure, List<_i10.Tasks>>>.value(
                _FakeEither_4<_i9.Failure, List<_i10.Tasks>>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i6.Either<_i9.Failure, List<_i10.Tasks>>>.value(
                _FakeEither_4<_i9.Failure, List<_i10.Tasks>>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i7.Future<_i6.Either<_i9.Failure, List<_i10.Tasks>>>);
  @override
  _i7.Future<_i6.Either<_i9.Failure, _i10.Tasks>> viewTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewTask,
          [id],
        ),
        returnValue: _i7.Future<_i6.Either<_i9.Failure, _i10.Tasks>>.value(
            _FakeEither_4<_i9.Failure, _i10.Tasks>(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i6.Either<_i9.Failure, _i10.Tasks>>.value(
                _FakeEither_4<_i9.Failure, _i10.Tasks>(
          this,
          Invocation.method(
            #viewTask,
            [id],
          ),
        )),
      ) as _i7.Future<_i6.Either<_i9.Failure, _i10.Tasks>>);
}

/// A class which mocks [ServerException].
///
/// See the documentation for Mockito's code generation for more information.
class MockServerException extends _i1.Mock implements _i11.ServerException {}

/// A class which mocks [CacheException].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheException extends _i1.Mock implements _i11.CacheException {}
